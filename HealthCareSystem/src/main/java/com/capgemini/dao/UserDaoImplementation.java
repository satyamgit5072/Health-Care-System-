package com.capgemini.dao;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.capgemini.dto.DiagnosticCenter;
import com.capgemini.dto.CenterTest;
import com.capgemini.util.CollectionUtil;

public class UserDaoImplementation implements UserDao {
	
	DiagnosticCenter centerObj;
	
	CenterTest testObj;
	
	public boolean addCenter(DiagnosticCenter center) {
		List<CenterTest> defaultTests = new ArrayList<CenterTest>(); //adding 3 default tests to the Test arrayList of the newly added center.
		defaultTests.add(new CenterTest(CollectionUtil.testAutogeneratedId(),"blood group"));
		defaultTests.add(new CenterTest(CollectionUtil.testAutogeneratedId(),"blood sugar"));
		defaultTests.add(new CenterTest(CollectionUtil.testAutogeneratedId(),"blood pressure"));
		center.setListOfTests(defaultTests);
		return CollectionUtil.centerList.add(center); //this will return true if added to the center arrayList.
	}
	
	public boolean removeCenter(DiagnosticCenter center) { //this method is interacting with the DiagnosticCenter arrayList if the centerObject mathces with the passed centerObject than it is removing the center.
		Iterator<DiagnosticCenter> itr = CollectionUtil.centerList.iterator();
		while(itr.hasNext())
		{
			DiagnosticCenter c = itr.next();
			if(c==center)
			{
				itr.remove();
			}
		}
		return true;	
	}
	
	public String addTest(DiagnosticCenter center,CenterTest test) {
		center.getListOfTests().add(test);
		return "test added successfully";
	}
	
	public boolean removeTest(DiagnosticCenter center,CenterTest test) { 
		Iterator<CenterTest> itr = center.getListOfTests().iterator();
		while(itr.hasNext())
		{
			CenterTest t = itr.next();
			if(t==test)
			{
				itr.remove();
			}
		}
		return true;
	}
	
	public void viewCenters()
	{
		System.out.println("Center Id"+"        "+"Center Name");
		for(DiagnosticCenter dc:CollectionUtil.centerList)
		{
			System.out.println(dc.getCenterId()+"               "+dc.getCenterName());
		}
	}
	
	public void viewCentersAndTests()
	{
		for(DiagnosticCenter dc:CollectionUtil.centerList)
		{
			System.out.println();
			System.out.println("Center Id"+"        "+"Center Name");
			System.out.println(dc.getCenterId()+"               "+dc.getCenterName());
			System.out.println();
			System.out.println("Tests under "+dc.getCenterName()+" are:");
			System.out.println("Test Id"+"          "+"Test Name");
			for(CenterTest t:dc.getListOfTests())
			{
				System.out.println(t.getTestId()+"               "+t.getTestName());
			}
		}
	}
	
	public void viewCenterRepectiveTests(String centerId)
	{
		DiagnosticCenter center = getCenterObjectOfcenterId(centerId);
		System.out.println("Tests under "+center.getCenterName()+" are:");
		System.out.println("Test Id"+"          "+"Test Name");
		for(CenterTest t:center.getListOfTests())
		{	
			System.out.println(t.getTestId()+"               "+t.getTestName());	
		}
	}
	
	public DiagnosticCenter getCenterObjectOfcenterId(String centerId) //this method interacts with DiagnosticCenter arrayList and returns the centerObject corressponding to the given CenterId.
	{
		Iterator<DiagnosticCenter> itr = CollectionUtil.centerList.iterator();
		while(itr.hasNext())
		{
			DiagnosticCenter c = itr.next();
			if(c.getCenterId().equals(centerId))
			{
				centerObj=c;
			}
		}
		return centerObj;
	}
	
	public boolean isCenterNamePresent(String centerName) //this method interacts with DiagnosticCenter arrayList and returns the centerObject corressponding to the given CenterId.
	{
		DiagnosticCenter centerObject=null;
		Iterator<DiagnosticCenter> itr = CollectionUtil.centerList.iterator();
		while(itr.hasNext())
		{
			DiagnosticCenter c = itr.next();
			if(c.getCenterName().equals(centerName))
			{
				centerObject=c;
			}
		}
		if(centerObject==null)
		{
			return false;
		}
		return true;
	}
	
	public boolean isCenterIdPresent(String centerId) //this method interacts with DiagnosticCenter arrayList and returns the centerObject corressponding to the given CenterId.
	{
		DiagnosticCenter centerObject=null;
		Iterator<DiagnosticCenter> itr = CollectionUtil.centerList.iterator();
		while(itr.hasNext())
		{
			DiagnosticCenter c = itr.next();
			if(c.getCenterId().equals(centerId))
			{
				centerObject=c;
			}
		}
		if(centerObject==null)
		{
			return false;
		}
		return true;
	}
	
	public CenterTest getTestObject(DiagnosticCenter center, String testId)
	{
		Iterator<CenterTest> itr = center.getListOfTests().iterator();
		while(itr.hasNext())
		{
			CenterTest t = itr.next();
			if(t.getTestId().equals(testId))
			{
				testObj = t;
			}
		}
		return testObj;
	}
	
	public boolean isTestNamePresent(DiagnosticCenter centerObject,String testName)
	{
		CenterTest testObject=null;
		Iterator<CenterTest> itr = centerObject.getListOfTests().iterator();
		while(itr.hasNext())
		{
			CenterTest t = itr.next();
			if(t.getTestName().equals(testName))
			{
				testObject=t;
			}
		}
		if(testObject==null)
		{
			return false;
		}
		return true;
	}
	
	public boolean isTestIdPresent(DiagnosticCenter centerObject,String testId)
	{
		CenterTest testObject=null;
		Iterator<CenterTest> itr = centerObject.getListOfTests().iterator();
		while(itr.hasNext())
		{
			CenterTest t = itr.next();
			if(t.getTestId().equals(testId))
			{
				testObject=t;
			}
		}
		if(testObject==null)
		{
			return false;
		}
		return true;
	}
	
}
