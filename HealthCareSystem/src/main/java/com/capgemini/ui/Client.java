package com.capgemini.ui;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import com.capgemini.dto.DiagnosticCenter;
import com.capgemini.dto.CenterTest;
import com.capgemini.service.ServiceImplementation;
import com.capgemini.service.Validation;
import com.capgemini.util.*;

public class Client {

	public static void main(String[] args) throws IOException {
		
		ServiceImplementation si = new ServiceImplementation();
		Validation v = new Validation();
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Welcome to admin panel");
		
		while(true)
		{
			System.out.println();
			System.out.println("Enter 1 to add center");
			System.out.println("Enter 2 to remove center");
			System.out.println("Enter 3 to add test");
			System.out.println("Enter 4 to remove test");
			System.out.println("Enter 5 to view centers");
			System.out.println("Enter 6 to view centers and their corresponding tests");
			System.out.println("Enter any other mentioned key to exit");
			String choice = br.readLine();
			
			switch(choice)
			{
	
			case "1":
	
				System.out.println("\n*Note: Center name should not be blank, fist letter should be capital and it should not be there in Center list");
				System.out.println("\nEnter Center Name");
				while(true)
				{
				String centerName=br.readLine();
				if(v.validateCenterName(centerName))
				{
					si.addCenter(new DiagnosticCenter(CollectionUtil.centerAutogeneratedId(),centerName));
					System.out.println("Center added sucessfully");
					break;	
				}
				else
				{
					System.out.println("\nEnter the center name again that does not exit in the center List");
				}
				}
				break;
				
			case "2":
				
				System.out.println();
				si.viewCenters();
				System.out.println("\n*Note: Center Id should not be there in Center list");
				System.out.println("\nEnter the id of the center from the above centers list to delete");
				while(true)
				{
				String centerId = br.readLine();
				if(v.validateCenterId(centerId))
				{
					DiagnosticCenter centerObject = si.getCenterObjectOfcenterId(centerId); //getting the centerObject corresponding to the centerId.
					si.removeCenter(centerObject); //calling the removeCenter method of the serviceImplementation class.
					System.out.println("Center removed successfully");
					break;
				}
				else
				{
					System.out.println("Enter the center Id again that exit in the center list.");
				}
				}
				break;
				
			case "3":
				
				System.out.println();
				si.viewCenters();
				System.out.println("\nEnter the id of the center from the above centers to add the test in that corressponding center");
				while(true)
				{
				String center_Id = br.readLine();
				if(v.validateCenterId(center_Id))
				{
				System.out.println("Enter the test name you want to add");
				while(true)
				{
				String testName = br.readLine();
				DiagnosticCenter centerObject = si.getCenterObjectOfcenterId(center_Id);
				if(v.validateCenterTest(centerObject,testName))
				{
				si.addTest(centerObject,new CenterTest(CollectionUtil.testAutogeneratedId(),testName));//here addTest of the ServiceImplementation class is taking two parameters one is the object of the centerArraylist and the other parameter is the name of the test to add in that center.
				System.out.println("Test successfully added to the "+centerObject.getCenterName());
				break;
				}
				else
				{
					System.out.println("\nEnter the test name that you want to add which does not exist in "+centerObject.getCenterName());
				}
				}
				break;
				}
				else
				{
					System.out.println("\nEnter the id of the center that exists in the center list");
				}
				}
				break;
				
			case "4":
				
				System.out.println();
				si.viewCenters();
				System.out.println("Enter the id of the center from the above centers to remove their corressponding test");
				while(true)
				{
				String center_id = br.readLine();
				if(v.validateCenterId(center_id))
				{
				si.viewCenterRepectiveTests(center_id);
				System.out.println("\nEnter the id of the test from the above respective center tests to remove the test");
				while(true)
				{
				String test_Id = br.readLine();
				DiagnosticCenter centerObject = si.getCenterObjectOfcenterId(center_id);
				if(v.validateCenterTestId(centerObject,test_Id))
				{
					CenterTest t = si.getTestObject(centerObject,test_Id);
					si.removeTest(centerObject, t);
					System.out.println("Test Successfully removed from "+si.getCenterObjectOfcenterId(center_id).getCenterName());
					break;
				}
				else
				{
					System.out.println("\nEnter the test id that you want to delete which exists in "+centerObject.getCenterName()+"test list");
				}
				}
				break;
				}
				else
				{
					System.out.println("\nEnter the id of the center that exists in the center list");
				}
				}
				break;
				
			case "5":
				System.out.println();
				si.viewCenters();
				break;
				
			case "6":
				System.out.println();
				si.viewCentersAndTests();
				break;
				
			default:
				System.exit(1);
				break;
			}
		}
	}
}
